<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Snapshots of Internal Monologues]]></title>
  <link href="http://nishanthvasudevan.github.io/atom.xml" rel="self"/>
  <link href="http://nishanthvasudevan.github.io/"/>
  <updated>2015-05-07T01:12:21+05:30</updated>
  <id>http://nishanthvasudevan.github.io/</id>
  <author>
    <name><![CDATA[Nishanth Vasudevan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Kernel Data Structures for Process Management]]></title>
    <link href="http://nishanthvasudevan.github.io/blog/2015/01/12/linux-kernel-data-structures-for-process-management/"/>
    <updated>2015-01-12T21:51:38+05:30</updated>
    <id>http://nishanthvasudevan.github.io/blog/2015/01/12/linux-kernel-data-structures-for-process-management</id>
    <content type="html"><![CDATA[<p>The concept of a process is fundamental to any multiprogramming operating system. A process is usually defined as an instance of a program in execution. They are often called tasks or threads in Linux source code.</p>

<h3>struct task_struct</h3>

<p>To manage processes, the kernel must have a clear picture of what each process is doing. It must know, for instance, the process’s priority, whether it is running on a CPU or blocked on an event, what address space has been assigned to it, which files it is allowed to address, and so on. This is the role of the process descriptor, a task_struct type structure whose fields contain all the information related to a single process.</p>

<!-- more -->


<p>(include/linux/sched.h)</p>

<pre><code>struct task_struct {
     volatile long state;     /* -1 unrunnable, 0 runnable, &gt;0 stopped */
     void *stack;
     atomic_t usage;
     unsigned int flags;     /* per process flags, defined below */
     unsigned int ptrace;

     int lock_depth;          /* BKL lock depth */

#ifdef CONFIG_SMP
#ifdef __ARCH_WANT_UNLOCKED_CTXSW
     int oncpu;
#endif
#endif

     int prio, static_prio, normal_prio;
     unsigned int rt_priority;
     const struct sched_class *sched_class;
     struct sched_entity se;
     struct sched_rt_entity rt;

#ifdef CONFIG_PREEMPT_NOTIFIERS
     /* list of struct preempt_notifier: */
     struct hlist_head preempt_notifiers;
#endif

     /*
      * fpu_counter contains the number of consecutive context switches
      * that the FPU is used. If this is over a threshold, the lazy fpu
      * saving becomes unlazy to save the trap. This is an unsigned char
      * so that after 256 times the counter wraps and the behavior turns
      * lazy again; this to deal with bursty apps that only use FPU for
      * a short time
      */
     unsigned char fpu_counter;
#ifdef CONFIG_BLK_DEV_IO_TRACE
     unsigned int btrace_seq;
#endif

     unsigned int policy;
     cpumask_t cpus_allowed;

#ifdef CONFIG_PREEMPT_RCU
     int rcu_read_lock_nesting;
     char rcu_read_unlock_special;
     struct list_head rcu_node_entry;
#endif /* #ifdef CONFIG_PREEMPT_RCU */
#ifdef CONFIG_TREE_PREEMPT_RCU
     struct rcu_node *rcu_blocked_node;
#endif /* #ifdef CONFIG_TREE_PREEMPT_RCU */
#ifdef CONFIG_RCU_BOOST
     struct rt_mutex *rcu_boost_mutex;
#endif /* #ifdef CONFIG_RCU_BOOST */

#if defined(CONFIG_SCHEDSTATS) || defined(CONFIG_TASK_DELAY_ACCT)
     struct sched_info sched_info;
#endif

     struct list_head tasks;
#ifdef CONFIG_SMP
     struct plist_node pushable_tasks;
#endif

     struct mm_struct *mm, *active_mm;
#ifdef CONFIG_COMPAT_BRK
     unsigned brk_randomized:1;
#endif
#if defined(SPLIT_RSS_COUNTING)
     struct task_rss_stat     rss_stat;
#endif
/* task state */
     int exit_state;
     int exit_code, exit_signal;
     int pdeath_signal;  /*  The signal sent when the parent dies  */
     /* ??? */
     unsigned int personality;
     unsigned did_exec:1;
     unsigned in_execve:1;     /* Tell the LSMs that the process is doing an
                     * execve */
     unsigned in_iowait:1;


     /* Revert to default priority/policy when forking */
     unsigned sched_reset_on_fork:1;

     pid_t pid;
     pid_t tgid;

#ifdef CONFIG_CC_STACKPROTECTOR
     /* Canary value for the -fstack-protector gcc feature */
     unsigned long stack_canary;
#endif

     /*
      * pointers to (original) parent process, youngest child, younger sibling,
      * older sibling, respectively.  (p-&gt;father can be replaced with
      * p-&gt;real_parent-&gt;pid)
      */
     struct task_struct *real_parent; /* real parent process */
     struct task_struct *parent; /* recipient of SIGCHLD, wait4() reports */
     /*
      * children/sibling forms the list of my natural children
      */
     struct list_head children;     /* list of my children */
     struct list_head sibling;     /* linkage in my parent's children list */
     struct task_struct *group_leader;     /* threadgroup leader */

     /*
      * ptraced is the list of tasks this task is using ptrace on.
      * This includes both natural children and PTRACE_ATTACH targets.
      * p-&gt;ptrace_entry is p's link on the p-&gt;parent-&gt;ptraced list.
      */
     struct list_head ptraced;
     struct list_head ptrace_entry;

     /* PID/PID hash table linkage. */
     struct pid_link pids[PIDTYPE_MAX];
     struct list_head thread_group;

     struct completion *vfork_done;          /* for vfork() */
     int __user *set_child_tid;          /* CLONE_CHILD_SETTID */
     int __user *clear_child_tid;          /* CLONE_CHILD_CLEARTID */

     cputime_t utime, stime, utimescaled, stimescaled;
     cputime_t gtime;
#ifndef CONFIG_VIRT_CPU_ACCOUNTING
     cputime_t prev_utime, prev_stime;
#endif
     unsigned long nvcsw, nivcsw; /* context switch counts */
     struct timespec start_time;           /* monotonic time */
     struct timespec real_start_time;     /* boot based time */
/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */
     unsigned long min_flt, maj_flt;

     struct task_cputime cputime_expires;
     struct list_head cpu_timers[3];

/* process credentials */
     const struct cred __rcu *real_cred; /* objective and real subjective task
                          * credentials (COW) */
     const struct cred __rcu *cred;     /* effective (overridable) subjective task
                          * credentials (COW) */
     struct cred *replacement_session_keyring; /* for KEYCTL_SESSION_TO_PARENT */

     char comm[TASK_COMM_LEN]; /* executable name excluding path
                         - access with [gs]et_task_comm (which lock
                           it with task_lock())
                         - initialized normally by setup_new_exec */
/* file system info */
     int link_count, total_link_count;
#ifdef CONFIG_SYSVIPC
/* ipc stuff */
     struct sysv_sem sysvsem;
#endif
#ifdef CONFIG_DETECT_HUNG_TASK
/* hung task detection */
     unsigned long last_switch_count;
#endif
/* CPU-specific state of this task */
     struct thread_struct thread;
/* filesystem information */
     struct fs_struct *fs;
/* open file information */
     struct files_struct *files;
/* namespaces */
     struct nsproxy *nsproxy;
/* signal handlers */
     struct signal_struct *signal;
     struct sighand_struct *sighand;

     sigset_t blocked, real_blocked;
     sigset_t saved_sigmask;     /* restored if set_restore_sigmask() was used */
     struct sigpending pending;

     unsigned long sas_ss_sp;
     size_t sas_ss_size;
     int (*notifier)(void *priv);
     void *notifier_data;
     sigset_t *notifier_mask;
     struct audit_context *audit_context;
#ifdef CONFIG_AUDITSYSCALL
     uid_t loginuid;
     unsigned int sessionid;
#endif
     seccomp_t seccomp;

/* Thread group tracking */
        u32 parent_exec_id;
        u32 self_exec_id;
/* Protection of (de-)allocation: mm, files, fs, tty, keyrings, mems_allowed,
 * mempolicy */
     spinlock_t alloc_lock;

#ifdef CONFIG_GENERIC_HARDIRQS
     /* IRQ handler threads */
     struct irqaction *irqaction;
#endif

     /* Protection of the PI data structures: */
     raw_spinlock_t pi_lock;

#ifdef CONFIG_RT_MUTEXES
     /* PI waiters blocked on a rt_mutex held by this task */
     struct plist_head pi_waiters;
     /* Deadlock detection and priority inheritance handling */
     struct rt_mutex_waiter *pi_blocked_on;
#endif

#ifdef CONFIG_DEBUG_MUTEXES
     /* mutex deadlock detection */
     struct mutex_waiter *blocked_on;
#endif
#ifdef CONFIG_TRACE_IRQFLAGS
     unsigned int irq_events;
     unsigned long hardirq_enable_ip;
     unsigned long hardirq_disable_ip;
     unsigned int hardirq_enable_event;
     unsigned int hardirq_disable_event;
     int hardirqs_enabled;
     int hardirq_context;
     unsigned long softirq_disable_ip;
     unsigned long softirq_enable_ip;
     unsigned int softirq_disable_event;
     unsigned int softirq_enable_event;
     int softirqs_enabled;
     int softirq_context;
#endif
#ifdef CONFIG_LOCKDEP
# define MAX_LOCK_DEPTH 48UL
     u64 curr_chain_key;
     int lockdep_depth;
     unsigned int lockdep_recursion;
     struct held_lock held_locks[MAX_LOCK_DEPTH];
     gfp_t lockdep_reclaim_gfp;
#endif

/* journalling filesystem info */
     void *journal_info;

/* stacked block device info */
     struct bio_list *bio_list;

#ifdef CONFIG_BLOCK
/* stack plugging */
     struct blk_plug *plug;
#endif

/* VM state */
     struct reclaim_state *reclaim_state;

     struct backing_dev_info *backing_dev_info;

     struct io_context *io_context;

     unsigned long ptrace_message;
     siginfo_t *last_siginfo; /* For ptrace use.  */
     struct task_io_accounting ioac;
#if defined(CONFIG_TASK_XACCT)
     u64 acct_rss_mem1;     /* accumulated rss usage */
     u64 acct_vm_mem1;     /* accumulated virtual memory usage */
     cputime_t acct_timexpd;     /* stime + utime since last update */
#endif
#ifdef CONFIG_CPUSETS
     nodemask_t mems_allowed;     /* Protected by alloc_lock */
     int mems_allowed_change_disable;
     int cpuset_mem_spread_rotor;
     int cpuset_slab_spread_rotor;
#endif
#ifdef CONFIG_CGROUPS
     /* Control Group info protected by css_set_lock */
     struct css_set __rcu *cgroups;
     /* cg_list protected by css_set_lock and tsk-&gt;alloc_lock */
     struct list_head cg_list;
#endif
#ifdef CONFIG_FUTEX
     struct robust_list_head __user *robust_list;
#ifdef CONFIG_COMPAT
     struct compat_robust_list_head __user *compat_robust_list;
#endif
     struct list_head pi_state_list;
     struct futex_pi_state *pi_state_cache;
#endif
#ifdef CONFIG_PERF_EVENTS
     struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
     struct mutex perf_event_mutex;
     struct list_head perf_event_list;
#endif
#ifdef CONFIG_NUMA
     struct mempolicy *mempolicy;     /* Protected by alloc_lock */
     short il_next;
     short pref_node_fork;
#endif
     atomic_t fs_excl;     /* holding fs exclusive resources */
     struct rcu_head rcu;

     /*
      * cache last used pipe for splice
      */
     struct pipe_inode_info *splice_pipe;
#ifdef     CONFIG_TASK_DELAY_ACCT
     struct task_delay_info *delays;
#endif
#ifdef CONFIG_FAULT_INJECTION
     int make_it_fail;
#endif
     struct prop_local_single dirties;
#ifdef CONFIG_LATENCYTOP
     int latency_record_count;
     struct latency_record latency_record[LT_SAVECOUNT];
#endif
     /*
      * time slack values; these are used to round up poll() and
      * select() etc timeout values. These are in nanoseconds.
      */
     unsigned long timer_slack_ns;
     unsigned long default_timer_slack_ns;

     struct list_head     *scm_work_list;
#ifdef CONFIG_FUNCTION_GRAPH_TRACER
     /* Index of current stored address in ret_stack */
     int curr_ret_stack;
     /* Stack of return addresses for return function tracing */
     struct ftrace_ret_stack     *ret_stack;
     /* time stamp for last schedule */
     unsigned long long ftrace_timestamp;
     /*
      * Number of functions that haven't been traced
      * because of depth overrun.
      */
     atomic_t trace_overrun;
     /* Pause for the tracing */
     atomic_t tracing_graph_pause;
#endif
#ifdef CONFIG_TRACING
     /* state flags for use by tracers */
     unsigned long trace;
     /* bitmask of trace recursion */
     unsigned long trace_recursion;
#endif /* CONFIG_TRACING */
#ifdef CONFIG_CGROUP_MEM_RES_CTLR /* memcg uses this to do batch job */
     struct memcg_batch_info {
          int do_batch;     /* incremented when batch uncharge started */
          struct mem_cgroup *memcg; /* target memcg of uncharge */
          unsigned long nr_pages;     /* uncharged usage */
          unsigned long memsw_nr_pages; /* uncharged mem+swap usage */
     } memcg_batch;
#endif
#ifdef CONFIG_HAVE_HW_BREAKPOINT
     atomic_t ptrace_bp_refcnt;
#endif
};
</code></pre>

<h3>struct thread_info</h3>

<p>Each process descriptor is linked to a 2 page chunk of memory containing a kernel run-time stack for the process and a small (52 byte) thread data structure. This chunk of physical memory is mapped to the same virtual address for every dispatched task. This mapping occurs when a Linux process makes it to the CPU for execution. When a process enters the kernel, its kernel stack is initially empty, and the thread_info structure can easily be found as an offset to %esp register. Since the thread_info structure contains a pointer to the process descriptor as its first field, the kernel can quickly locate the descriptor on each context switch. thread_union structure contains the thread_info as well as the process description pointer (task_struct structure)</p>

<p><code>(include/linux/sched.h)</code></p>

<pre><code>union thread_union {  
        struct thread_info thread_info;  
        unsigned long stack[THREAD_SIZE/sizeof(long)];  
};  
</code></pre>

<p><a href="https://github.com/nishanthvasudevan/kernelspacecode/tree/master/task_struct_traversal">Click this link to see how you can traverse the task_struct</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Editing Kernel Global Variables]]></title>
    <link href="http://nishanthvasudevan.github.io/blog/2014/11/16/editing-kernel-global-variables/"/>
    <updated>2014-11-16T20:58:30+05:30</updated>
    <id>http://nishanthvasudevan.github.io/blog/2014/11/16/editing-kernel-global-variables</id>
    <content type="html"><![CDATA[<p>In this article I will demonstrate how to edit kernel global variables using KDB. I am assuming that the kernel is compiled for debugging and it had CONFIG_KALLSYMS enabled during configuration.<br/>
KDB is one of the debugger front ends available in Linux which interfaces to the debug core. The other one is KGDB. KDB is a simplistic shell-style interface which can be used on a system console with a keyboard or serial console. It can used to inspect memory, registers, process lists, dmesg and even set breakpoints to stop in a certain location. It is however not a source debugger, although it is possible to set breakpoints and execute some basic kernel run control. It is mainly aimed at doing some analysis to aid in development or diagnosing kernel problems.</p>

<!-- more -->


<p></p>

<h3>Entering KDB</h3>

<p>Go to virtual console 1 (CTRL-ALT-F1)</p>

<pre><code>$ echo “kbd” &gt; /sys/module/kgdboc/parameters/kgdboc
$ echo g &gt; /proc/sysrq-trigger  
</code></pre>

<p>Now we are in kdb prompt, to go back to shell, type ‘go’ inside kdb and hit enter.</p>

<p>Let’s pick a harmless command,  *sync.<br/>
sync command calls the sync system call, which in turn calls sys_sync() function</p>

<p>Let’s enter kdb and set a breakpoint for sys_sync</p>

<pre><code>$ echo g &gt; /proc/sysrq-trigger  
kdb&gt; bp sys_sync  
kdb&gt; go  
$ sync (As soon as we hit enter, the sys_sync() function is called but since there is breakpoint set for that function, we enter kdb)  
kdb&gt;  
</code></pre>

<p><img src="http://nishanthvasudevan.github.io/images/2014-11-16-editing-kernel-global-variables-screenshot1.png" alt="Alt text" /></p>

<h3>Editing PID_MAX</h3>

<pre><code># cat /proc/sys/kernel/pid_max
65536  
</code></pre>

<p>65536 in hex is 0x00010000<br/>
Let’s set it to 32768 which in hex is 0x0001000 / 2 =  0x00008000</p>

<p>There are many ways to edit this value. But none of them are as cool as what I am about to show you.</p>

<pre><code># grep pid_max /proc/kallsyms  
c0f283ac D pid_max  
c0f283b0 D pid_max_min  
c0f283b4 D pid_max_max  

# echo g &gt; /proc/sysrq-trigger  
kdb&gt; md c0f283ac  
kdb&gt; mm c0f283ac 0x00008000  
kdb&gt;go  
# cat /proc/sys/kernel/pid_max  
32768   
</code></pre>

<p>There you go a kernel variable has been modified live using KDB</p>

<p><img src="http://nishanthvasudevan.github.io/images/2014-11-16-editing-kernel-global-variables-screenshot2.png" alt="Alt text" /></p>

<p><img src="http://nishanthvasudevan.github.io/images/2014-11-16-editing-kernel-global-variables-screenshot3.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add a System Call in Linux]]></title>
    <link href="http://nishanthvasudevan.github.io/blog/2014/07/12/how-to-add-a-system-call-in-linux/"/>
    <updated>2014-07-12T10:37:54+05:30</updated>
    <id>http://nishanthvasudevan.github.io/blog/2014/07/12/how-to-add-a-system-call-in-linux</id>
    <content type="html"><![CDATA[<p>Here I am going to demonstrate what goes into incorporating a system call in a Linux 2.6 (on x86 architecture)</p>

<p>When a user mode process invokes a system call, the CPU switches to kernel mode and starts the execution of a kernel function.
The switch to kernel mode is achieved using the int $0x80 or the sysenter instructions. The net result of both methods, however is a jump to an assembly language function called the system call handler.
The user land process that calls the system call must pass a parameter called the system call number to identify the required system call. The %eax register is used for this purpose.</p>

<!-- more -->


<p>The parameters of ordinary C functions are usually passed by writing their values in the active program stack (either user mode stack or the kernel mode stack). Because system calls are a special kind of function that cross over from user to kernel land, neither the user mode or the kernel mode stacks can be used. So system call parameters are written in the CPU registers before issuing the system call. The kernel then copies the parameters stored in the CPU registers onto the kernel mode stack before invoking the system call service routine, because the latter is an ordinary C function. Two conditions must be satisfied for parameters to be passed in registers:
1. The length of each parameter cannot exceed the length of a register
2. The number of parameters must not exceed six (%ebx, %ecx, %edx, %esi, %edi and %ebp), besides the system call number passed in %eax, because x86 processors have a very limited number of registers.
The return value is also sent across to user land using the %eax register.</p>

<h3>Adding a new system call</h3>

<p>Let us now add a new system call. Let’s call our system call “mynewcall&#8221;</p>

<p>We have to register mynewcall in the kernel
First let’s add a new sys call entry
Open <code>arch/x86/include/asm/unistd_32.h</code> or <code>unistd_64.h</code> and add the following line after line number 345 (you will understand once you navigate to this line)
#define __NR_mynewcall     <new-number> (new-number in this case 338, because the last used system call number was 337)
<code>#define __NR_mynewcall 338</code>
Couple of lines below this you will find #define NR_syscalls 338. Increment 338 by 1 to indicate addition of a new call
<code>#define NR_syscalls 339</code>  (NR_syscalls is now 339)</p>

<p>Next, we need update list of all sys call
open <code>arch/x86/include/asm/syscalls.h</code>
add <code>asmlinkage long sys_mynewcall(void);</code> at line 44</p>

<p>Next, update the sys call table
open <code>arch/x86/kernel/syscall_table_32.S</code>
and add this line <code>.long sys_mynewcall /*338*/</code> to the end of the file (the 338 in the C comment section is only to indicate the number for someone reading the code. no special meaning attached to it.)</p>

<p>Finally, let’s write our system call routine, in this case a simple C function</p>

<p>add the lines below in <code>kernel/sys.c</code> (I am writing this in sys.c, and not in a separate file because I don’t want edit the kernel makefiles. Adding this in an already existing file will make things easier for this example and the compile time of the kernel will be reduced.)</p>

<pre><code>    asmlinkage long sys_mynewcall(void)
    {
            printk(KERN_INFO “mynewcall with pid %d, process name %s\n”, current-&gt;pid, current-&gt;comm);
            return 100; /\* Intentionally setting this value to 100. Check the return value of the user land code that calls mynewcall. It should be 100 \*/ 
    }
</code></pre>

<p>The function above, will print the process-id and the path of the executable of the user land process that called this system call, in the circular kernel log buffer (check dmesg)</p>

<p>After this step, recompile the kernel.</p>

<h3>Testing our new system call</h3>

<p>Now let us write a user land C program that calls our new system call</p>

<pre><code>    f1()
    {

            __asm__("movl $338, %eax");
            __asm__("int $0x80");
    }

    main()
    {
            printf("return value is %d\n",f1());
    }
</code></pre>

<p>Running the program above should return
“return value is 100&#8221;
Note in the function f1(), that we are not calling return (it doesn’t make sense here). the return value is set in %eax as mentioned earlier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Editing Global Variables of a Running User Land Program Using GDB]]></title>
    <link href="http://nishanthvasudevan.github.io/blog/2014/06/21/editing-global-variables-of-a-running-user-land-program-using-gdb/"/>
    <updated>2014-06-21T21:09:36+05:30</updated>
    <id>http://nishanthvasudevan.github.io/blog/2014/06/21/editing-global-variables-of-a-running-user-land-program-using-gdb</id>
    <content type="html"><![CDATA[<p>In this article, I will demonstrate how to edit a global variable of a user land process using GDB. A simple use case of this method that comes to mind is editing the value representing the number of licenses of a product.</p>

<!-- more -->


<pre><code>\#include&lt;stdio.h&gt;  
\#include&lt;stdlib.h&gt;  
int y = 1000;  
f1(int c)  
{  
        int x;  
    x = 2\*c\*y;  
        printf("f1: double the value = %d\n", x);  
}  

main()  
{  
        int r;  
        while(1){  
            r = rand() % 10;  
            printf("main: rand value = %d\n",r);  
            sleep(1);  
            f1(r);  
        }  
}  
</code></pre>

<p>compile the code above using -g option of gcc</p>

<pre><code>$ gdb -g testcode.c  
</code></pre>

<p>run the a.out</p>

<pre><code>$ ./a.out  
main: rand value = 3  
f1: double the value = 6000  
main: rand value = 6  
f1: double the value = 12000  
main: rand value = 7  
f1: double the value = 14000  
</code></pre>

<p>We will now change the value of global variable y to 100. Once that value is changed, doubled values will be multiplied by 100</p>

<p>First, find out the pid of a.out<br/>
then call gdb with that executable and the pid</p>

<pre><code>\# gdb a.out &lt;pid&gt;  

root@ubuntu-vbox-mc:/home/nishanth# gdb a.out 1966  
GNU gdb (GDB) 7.2-ubuntu  
Copyright (C) 2010 Free Software Foundation, Inc.  
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;  
This is free software: you are free to change and redistribute it.  
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"  
and "show warranty" for details.  
This GDB was configured as "i686-linux-gnu".  
For bug reporting instructions, please see:  
&lt;http://www.gnu.org/software/gdb/bugs/&gt;...  
Reading symbols from /home/bhojas/a.out...done.  
Attaching to program: /home/bhojas/a.out, process 1966  
Reading symbols from /lib/libc.so.6...(no debugging symbols found)...done.  
Loaded symbols for /lib/libc.so.6  
Reading symbols from /lib/ld-linux.so.2...(no debugging symbols found)...done.  
Loaded symbols for /lib/ld-linux.so.2  
0x004cd416 in __kernel_vsyscall ()  
(gdb) print y  
$1 = 1000  
(gdb) set var y=100  
(gdb)c  
</code></pre>

<p>The output immediately changes like so</p>

<pre><code>main: rand value = 5  
f1: double the value = 1000  
main: rand value = 6  
f1: double the value = 1200  
main: rand value = 7  
f1: double the value = 1400  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kexec and Kdump]]></title>
    <link href="http://nishanthvasudevan.github.io/blog/2014/05/06/kexec-and-kdump/"/>
    <updated>2014-05-06T22:48:30+05:30</updated>
    <id>http://nishanthvasudevan.github.io/blog/2014/05/06/kexec-and-kdump</id>
    <content type="html"><![CDATA[<p>Kexec uses the image overlay philosophy of the UNIX exec() system call to spawn a new kernel over a running kernel. Essentially, it skips the boot loader stage and directly loads the new kernel into memory, where it starts executing immediately. Kexec’s most popular user is Kdump.</p>

<p>Kdump is used to capture the crash dump from the context of a freshly booted kernel and not from the context of the crashed kernel.<br/>
The first kernel reserves a section of memory that the second kernel uses to boot. Kdump is supported in i686, x86_64,a64 and ppc64 platforms.</p>

<!-- more -->


<h3>Centos Setup for Kexec / Kdump</h3>

<p># yum —enablerepo=debug install exec-tools crash kernel-debug kernel-debuginfo-`uname -r`</p>

<p>Modify grub (/etc/grub.conf)<br/>
root(hd0,0) kernel /vmlinuz-2.6.32-279.22.1.e16.i686 ro<br/>
root=/dev/mapper/vg_centos6-lv_root rd_NO_LUKS LANG=en_US.UTF-8 rd_LVM_LV=vg_centos6/lv_swap_rd_NO_MD_SYSFONT=latarcyrheb=sun16 rd_LVM_LV=vg_centos/lv_root KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM <strong>crashkernel=128M</strong></p>

<p>enable kdump<br/>
chkconfig kdump on<br/>
service kdump start<br/>
a reboot is required in order to boot the kernel with the new argument.<br/>
# init 6</p>

<p>after reboot check if kdump is active<br/>
service kdump status<br/>
# cat /sys/kernel/kexec_crash_loaded<br/>
1<br/>
# cat /proc/iomem | grep -i crash<br/>
02000000-9ffffff : Crash kernel</p>

<h3>Triggering Crash Dump</h3>

<p># echo 1 > /proc/sys/kernel/sysrq<br/>
# echo c > /proc/sysrq-trigger</p>

<h3>Analysis</h3>

<p># crash /usr/lib/debug/lib/modules/2.6.32.-279.22.1.el6.i686/vmlinux /var/crash/127.0.0.1-2014-02-10-14:00:01/vmcore<br/>
crash><br/>
The following kernel core analysis can be done<br/>
- kernel stack back traces of all processes.<br/>
- source code disassembly<br/>
- formatted kernel structure and variable displays<br/>
- virtual memory data<br/>
- dumps of linked-lists, etc.<br/>
along with several commands that delve deeper into specific kernel subsystems<br/>
relevant gdb commands may also be entered.</p>

<p>Examples<br/>
(command output is usually a page (less))<br/>
crash> ps<br/>
command output can be redirected to a pipe or to a file using standard shell redirection syntax<br/>
crash> task | grep uid<br/>
 uid = 3369,<br/>
 euid = 3369,<br/>
 suid = 3369,<br/>
 fsuid = 3369,<br/>
crash> foreach bt > bt.all<br/>
crash> ps >> process.data<br/>
crash> kmem -i | grep SLAB > slab.pages</p>

<p>A live example below<br/>
I have written a kernel space C program that will crash when it encounters this line<br/>
*p = ‘A’; (because char *p = 0 earlier)<br/>
Upon executing this program, the kernel crashes and crash dump is captured using Kdump.</p>

<p>[root@localhost 127.0.0.1-2014-10-12-17:32:01]# <strong>crash /usr/lib/debug/lib/modules/2.6.32-358.el6.i686/vmlinux vmcore</strong></p>

<p>crash 6.1.0-1.el6<br/>
Copyright &copy; 2002-2012  Red Hat, Inc.<br/>
Copyright &copy; 2004, 2005, 2006, 2010  IBM Corporation<br/>
Copyright &copy; 1999-2006  Hewlett-Packard Co<br/>
Copyright &copy; 2005, 2006, 2011, 2012  Fujitsu Limited<br/>
Copyright &copy; 2006, 2007  VA Linux Systems Japan K.K.<br/>
Copyright &copy; 2005, 2011  NEC Corporation<br/>
Copyright &copy; 1999, 2002, 2007  Silicon Graphics, Inc.<br/>
Copyright &copy; 1999, 2000, 2001, 2002  Mission Critical Linux, Inc.<br/>
This program is free software, covered by the GNU General Public License,<br/>
and you are welcome to change it and/or distribute copies of it under<br/>
certain conditions.  Enter &ldquo;help copying&rdquo; to see the conditions.<br/>
This program has absolutely no warranty.  Enter &ldquo;help warranty&rdquo; for details.<br/>
GNU gdb (GDB) 7.3.1<br/>
Copyright &copy; 2011 Free Software Foundation, Inc.<br/>
License GPLv3+: GNU GPL version 3 or later &lt;<a href="http://gnu.org/licenses/gpl.html]]">http://gnu.org/licenses/gpl.html]]</a> ><br/>
This is free software: you are free to change and redistribute it.<br/>
There is NO WARRANTY, to the extent permitted by law.  Type &ldquo;show copying&rdquo;<br/>
and &ldquo;show warranty&rdquo; for details.<br/>
This GDB was configured as &ldquo;i686-pc-linux-gnu&rdquo;&hellip;</p>

<p>KERNEL: /usr/lib/debug/lib/modules/2.6.32-358.el6.i686/vmlinux
DUMPFILE: vmcore  [PARTIAL DUMP]
CPUS: 1
DATE: Sun Oct 12 17:31:58 2014
UPTIME: 00:11:18
LOAD AVERAGE: 0.00, 0.06, 0.06
TASKS: 242
NODENAME: localhost.localdomain
RELEASE: 2.6.32-358.el6.i686
VERSION: #1 SMP Thu Feb 21 21:50:49 UTC 2013
MACHINE: i686  (2274 Mhz)
MEMORY: 1 GB
PANIC: &ldquo;Oops: 0002 [#1] SMP &rdquo; (check log for details)
PID: 3034
COMMAND: &ldquo;cat&rdquo;
TASK: f6b16550  [THREAD_INFO: eed14000]
CPU: 0
STATE: TASK_RUNNING (PANIC)</p>

<p>crash> <strong>bt</strong><br/>
PID: 3034   TASK: f6b16550  CPU: 0   COMMAND: &ldquo;cat&rdquo;<br/>
 #0 [eed15ddc] crash_kexec at c04a07ec<br/>
 #1 [eed15e30] oops_end at c084b652<br/>
 #2 [eed15e44] no_context at c0436c7d<br/>
 #3 [eed15e68] bad_area at c0436ef6<br/>
 #4 [eed15e7c] <strong>do_page_fault at c0437409<br/>
 #5 [eed15efc] do_page_fault at c084cf45<br/>
 #6 [eed15f14] error_code (via page_fault) at c084a9f5<br/>
    EAX: 00000000  EBX: eed9af40  ECX: c0a62a74  EDX: 00000000  EBP: f7e12058<br/>
    DS:  007b      ESI: 00008000  ES:  007b      EDI: 084cb000  GS:  00e0<br/>
    CS:  0060      EIP: f7e120d4  ERR: ffffffff  EFLAGS: 00010296<br/>
 #7 [eed15f48] nfd_read at f7e120d4 [nfd]     (something happened at nfd_read)<br/>
 #8 [eed15f74] vfs_read at c0531c4b<br/>
 #9 [eed15f94] sys_read at c0531d7c<br/>
#10 [eed15fb0] ia32_sysenter_target at c04099b8<br/>
    EAX: 00000003  EBX: 00000003  ECX: 084cb000  EDX: 00008000<br/>
    DS:  007b      ESI: 00008000  ES:  007b      EDI: 00008000<br/>
    SS:  007b      ESP: bf94cf18  EBP: bf94cf58  GS:  0033<br/>
    CS:  0073      EIP: 0050c424  ERR: 00000003  EFLAGS: 00000246<br/>
crash> <strong>disassemble nfd_read</strong><br/>
No symbol &ldquo;nfd_read&rdquo; in current context.<br/>
gdb: gdb request failed: disassemble nfd_read<br/>
crash> <strong>gdb source /home/bhojas/linux_kernel_debugging/assignment4/sfscript (for this example had noted down the offsets earlier.)</strong><br/>
add symbol table from file &ldquo;/home/bhojas/linux_kernel_debugging/assignment4/nfd.ko&rdquo; at<br/>
        .text_addr = 0xf7e12000<br/>
        .data_addr = 0xf7e125c0<br/>
        .bss_addr = 0xf7e127ac<br/>
        .rodata_addr = 0xf7e122e0<br/>
crash> <strong>disassemble nfd_read</strong><br/>
Dump of assembler code for function nfd_read:<br/>
   0xf7e12058 &lt;+0>:     sub    $0x20,%esp<br/>
   0xf7e1205b &lt;+3>:     mov    %eax,0x14(%esp)<br/>
   0xf7e1205f &lt;+7>:     mov    %edx,0x10(%esp)<br/>
   0xf7e12063 &lt;+11>:    mov    %ecx,0xc(%esp)<br/>
   0xf7e12067 &lt;+15>:    movl   $0x0,0x18(%esp)<br/>
   0xf7e1206f &lt;+23>:    movl   $0xf7e1238c,(%esp)<br/>
   0xf7e12076 &lt;+30>:    call   0xc08477d3<br/>
   0xf7e1207b &lt;+35>:    movl   $0x0,0x1c(%esp)<br/>
   0xf7e12083 &lt;+43>:    jmp    0xf7e1209c &lt;nfd_read+68><br/>
   0xf7e12085 &lt;+45>:    mov    0xf7e127b4,%eax<br/>
   0xf7e1208a &lt;+50>:    add    $0x1,%eax<br/>
   0xf7e1208d &lt;+53>:    mov    %eax,0xf7e127b4<br/>
   0xf7e12092 &lt;+58>:    addl   $0x1,0x18(%esp)<br/>
   0xf7e12097 &lt;+63>:    addl   $0x1,0x1c(%esp)<br/>
   0xf7e1209c &lt;+68>:    cmpl   $0x9,0x1c(%esp)<br/>
   0xf7e120a1 &lt;+73>:    jle    0xf7e12085 &lt;nfd_read+45><br/>
   0xf7e120a3 &lt;+75>:    mov    0x18(%esp),%ecx<br/>
   0xf7e120a7 &lt;+79>:    addl   $0x1,0x18(%esp)<br/>
   0xf7e120ac &lt;+84>:    mov    0xf7e127b4,%eax<br/>
   0xf7e120b1 &lt;+89>:    mov    %eax,%edx<br/>
   0xf7e120b3 &lt;+91>:    add    $0x1,%eax<br/>
   0xf7e120b6 &lt;+94>:    mov    %eax,0xf7e127b4<br/>
   0xf7e120bb &lt;+99>:    mov    %ecx,0x8(%esp)<br/>
   0xf7e120bf &lt;+103>:   mov    %edx,0x4(%esp)<br/>
   0xf7e120c3 &lt;+107>:   movl   $0xf7e123b4,(%esp)<br/>
   0xf7e120ca &lt;+114>:   call   0xc08477d3<br/>
   0xf7e120cf &lt;+119>:   mov    0xf7e127b8,%eax<br/>
   0xf7e120d4 &lt;+124>:   movb   $0x41,(%eax) <strong>This is our *p=‘A’ because 0x41 is A in Ascii. crashed here.</strong><br/>
   0xf7e120d7 &lt;+127>:   movl   $0xf7e123dc,(%esp)<br/>
   0xf7e120de &lt;+134>:   call   0xc08477d3<br/>
   0xf7e120e3 &lt;+139>:   mov    $0x0,%eax<br/>
   0xf7e120e8 &lt;+144>:   add    $0x20,%esp<br/>
   0xf7e120eb &lt;+147>:   ret<br/>
End of assembler dump.<br/>
crash> <strong>bt</strong><br/>
PID: 3034   TASK: f6b16550  CPU: 0   COMMAND: &ldquo;cat&rdquo;<br/>
 #0 [eed15ddc] crash_kexec at c04a07ec<br/>
 #1 [eed15e30] oops_end at c084b652<br/>
 #2 [eed15e44] no_context at c0436c7d<br/>
 #3 [eed15e68] bad_area at c0436ef6<br/>
 #4 [eed15e7c] </strong>do_page_fault at c0437409<br/>
 #5 [eed15efc] do_page_fault at c084cf45<br/>
 #6 [eed15f14] error_code (via page_fault) at c084a9f5<br/>
    EAX: 00000000  EBX: eed9af40  ECX: c0a62a74  EDX: 00000000  EBP: f7e12058   <strong>note that ex register is zero. i.e. our *p = 0 and this is the reason for crash</strong><br/>
    DS:  007b      ESI: 00008000  ES:  007b      EDI: 084cb000  GS:  00e0<br/>
    CS:  0060      EIP: f7e120d4  ERR: ffffffff  EFLAGS: 00010296<br/>
 #7 [eed15f48] nfd_read at f7e120d4 [sanfd]<br/>
 #8 [eed15f74] vfs_read at c0531c4b<br/>
 #9 [eed15f94] sys_read at c0531d7c<br/>
#10 [eed15fb0] ia32_sysenter_target at c04099b8<br/>
    EAX: 00000003  EBX: 00000003  ECX: 084cb000  EDX: 00008000<br/>
    DS:  007b      ESI: 00008000  ES:  007b      EDI: 00008000<br/>
    SS:  007b      ESP: bf94cf18  EBP: bf94cf58  GS:  0033<br/>
    CS:  0073      EIP: 0050c424  ERR: 00000003  EFLAGS: 00000246<br/>
crash></p>
]]></content>
  </entry>
  
</feed>
